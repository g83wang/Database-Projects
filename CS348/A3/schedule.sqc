#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "util.h"


EXEC SQL INCLUDE SQLCA; 

EXEC SQL BEGIN DECLARE SECTION;
   char db[6] = "cs348";
   char pname[70], sname[70], cname[70], cnum[7], day[20], time[10], room[7], input[8], term[10];
   short section;

EXEC SQL END DECLARE SECTION;

int main(int argc, char *argv[]) {

    char output[100];

    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL CONNECT TO :db;

    printf("Connected to CS348\n");

    printf("Student Number: %s \n", argv[1]);

    strncpy(input,argv[1],8);

    EXEC SQL SELECT s.sname INTO :sname
            FROM Student s
            WHERE s.snum = :input; 

    EXEC SQL SELECT p.pname INTO :pname
            FROM Professor p
            WHERE p.pnum = :input; 

    EXEC SQL SELECT DISTINCT e.term INTO :term
            FROM Enrollment e
            WHERE not exists(
                SELECT *
                FROM Mark m
                WHERE m.cnum = e.cnum
                    AND m.term = e.term
                    AND m.section = e.section 
                );  

    EXEC SQL DECLARE schedule CURSOR FOR 
            SELECT c.cname, c.cnum, se.day, se.section, se.time, se.room
            FROM Student s, Schedule se, Enrollment e, Course c
            WHERE s.snum = :input
                AND e.snum = s.snum
                AND se.cnum = e.cnum
                AND c.cnum = e.cnum
                AND not exists (
                    SELECT *
                    FROM Mark m
                    WHERE m.term = e.term
                        AND m.cnum = e.cnum  
                        AND m.section = e.section
               )
            UNION
            SELECT ce.cname, ce.cnum, se.day, se.section, se.time, se.room
            FROM Schedule se, Class c, Professor p, Course ce
            WHERE p.pnum = :input
                AND c.pnum = p.pnum
                AND c.cnum = se.cnum
                AND c.term = se.term
                AND c.section = se.section
                AND c.cnum = ce.cnum
                AND not exists (
                    SELECT *
                    FROM Mark m, Enrollment e
                    WHERE m.term = e.term
                        AND m.cnum = e.cnum  
                        AND m.section = e.section
                        AND m.cnum = c.cnum
                        AND m.term = c.term
                        AND m.section = c.section
                )
            ;

    EXEC SQL OPEN schedule;
    EXEC SQL WHENEVER NOT FOUND GO TO end;
    if (sname[0] == '\0'){
        printf("Schedule for %s (%s) and term<%s>\n", pname, input, term);
    } else {
        printf("Schedule for %s (%s) and term<%s>\n", sname, input, term);
    }

    printf("-------\n");
    for (;;) {
        EXEC SQL FETCH schedule INTO :cname, :cnum, :day, :section, :time, :room;
        printf("%s:  %s (%s) %d %s %s\n", day, cname, cnum, section, time, room);
    };

nodata:
    EXEC SQL CLOSE schedule;
    printf("Schedule for %s does not exist.", term);
    printf("-------\n");
    EXEC SQL COMMIT;
    EXEC SQL CONNECT RESET;
    exit(0);
    
end:
    EXEC SQL CLOSE schedule;
    printf("-------\n");
    EXEC SQL COMMIT;
    EXEC SQL CONNECT RESET;
    exit(0);

error:
    check_error("My error",&sqlca);
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    EXEC SQL ROLLBACK;
    EXEC SQL CONNECT reset;
    exit(1);
}